import "../../customBundle.ts"
/* generated by Svelte v3.59.0 */
import {
	SvelteComponent,
	append_hydration,
	append_styles,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert_hydration,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "svelte/internal";

function add_css(target) {
	append_styles(target, "svelte-6hhjeo", "nav.svelte-6hhjeo{display:flex;background-color:var(--aqua-dim)}p.svelte-6hhjeo{margin:0;padding:7px;background-color:var(--bg_s);font-weight:bold;cursor:pointer}");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (6:0) {#each pages as page }
function create_each_block(ctx) {
	let p;
	let t_value = /*page*/ ctx[2].t + "";
	let t;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[1](/*page*/ ctx[2]);
	}

	return {
		c() {
			p = element("p");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, t_value);
			p_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "svelte-6hhjeo");
		},
		m(target, anchor) {
			insert_hydration(target, p, anchor);
			append_hydration(p, t);

			if (!mounted) {
				dispose = listen(p, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*pages*/ 1 && t_value !== (t_value = /*page*/ ctx[2].t + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(p);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let nav;
	let t0;
	let div;
	let t1;
	let p;
	let t2;
	let each_value = /*pages*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			nav = element("nav");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div = element("div");
			t1 = space();
			p = element("p");
			t2 = text("J치n Gajdo코");
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nav_nodes);
			}

			t0 = claim_space(nav_nodes);
			div = claim_element(nav_nodes, "DIV", { style: true });
			children(div).forEach(detach);
			t1 = claim_space(nav_nodes);
			p = claim_element(nav_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "J치n Gajdo코");
			p_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			this.h();
		},
		h() {
			set_style(div, "flex-grow", "1");
			attr(p, "class", "svelte-6hhjeo");
			attr(nav, "class", "svelte-6hhjeo");
		},
		m(target, anchor) {
			insert_hydration(target, nav, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(nav, null);
				}
			}

			append_hydration(nav, t0);
			append_hydration(nav, div);
			append_hydration(nav, t1);
			append_hydration(nav, p);
			append_hydration(p, t2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*pages, location*/ 1) {
				each_value = /*pages*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(nav, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { pages = [] } = $$props;

	const click_handler = page => {
		if (typeof page.s == "string") location.href = page.s; else page.s();
	};

	$$self.$$set = $$props => {
		if ('pages' in $$props) $$invalidate(0, pages = $$props.pages);
	};

	return [pages, click_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { pages: 0 }, add_css);
	}
}

export default Component;